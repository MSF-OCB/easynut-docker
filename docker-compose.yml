version: "3"
services:
  web:
    restart: always
    build: 
      context: ./web/
      # Required for django manage.py CLI (settings.py)
      args:
        SECRET_KEY: ${SECRET_KEY}
        DEBUG: ${DEBUG}
        ALLOWED_HOSTS: ${ALLOWED_HOSTS}
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        DB_SERVICE: ${DB_SERVICE}
        DB_PORT: ${DB_PORT}
        DATA_DB_NAME: ${DATA_DB_NAME}
    expose:
      - "8000"
    depends_on:
      - mysql
      - redis
    env_file: .env
    volumes:
      - django_static:/data/web/easynut/static
      - ./backups/backups:/opt/shared
    container_name: easynut_django
    working_dir: /data/web/easynut
    command: [sh, -c, "/usr/bin/gunicorn django_easynut.wsgi:application -w 2 -b :8000"]
  nginx:
    restart: always
    build: ./nginx/
    ports:
      - "80:80"
    depends_on:
      - web
    container_name: easynut_nginx
    volumes:
      - django_static:/data/web/easynut/static
  mysql:
    restart: always
    image: mysql:latest
    volumes:
      - ./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    env_file: .env
    expose:
      - "3306"
    container_name: easynut_mysql
  redis:
    restart: always
    image: redis:latest
    expose:
      - "6379"
    container_name: easynut_redis
  backups:
    restart: always
    image: alpine
    build:
      context: ./backups/
      args:
        DATA_DB_NAME: ${DATA_DB_NAME}
        CRON_TIME: ${CRON_TIME}
    env_file: .env
    depends_on:
      - mysql 
    volumes:
      - ./backups/backups:/backup
    container_name: easynut_backups
  phpmyadmin:
    restart: always
    image: phpmyadmin/phpmyadmin
    container_name: easynut_phpmyadmin
    ports:
      - "8080:80"
    depends_on:
      - mysql
    env_file: .env
    environment:
      - PMA_HOST=easynut_mysql
volumes:
  django_static:
  mysql_data:
